# This is the complete CI/CD pipeline for the Ruby on Rails application.
# It handles testing, security scanning, linting, image building, and deployment.
name: Ruby on Rails CI/CD

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

env:
  GCP_REGION: "asia-southeast1"
  APP_NAME: "jarvis-demo"
  DOCKER_REPO_NAME: "jarvis-demo-repo"

jobs:
  # This job runs on both pull requests and pushes to main.
  ci-checks:
    name: Test, Lint & Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby and cache gems
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Lint code with Rubocop
        run: bin/rubocop -f github

      - name: Scan for Rails vulnerabilities (Brakeman)
        run: bin/brakeman --no-pager

      - name: Scan for JavaScript vulnerabilities (Importmap)
        run: bin/importmap audit

      - name: Run unit and system tests
        env:
          RAILS_ENV: test
        run: bin/rails test

  # This job ONLY runs on a push to the main branch and only if ci-checks succeeds.
  # In .github/workflows/ci-cd.yml

  build-and-push:
    name: Build & Push Image
    runs-on: ubuntu-latest
    needs: [ci-checks]
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: "read"
      id-token: "write"
    # The job's output now clearly points to the 'prepare' step's output.
    outputs:
      image_url: ${{ steps.prepare.outputs.image_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev

      - name: Prepare image URL
        id: prepare
        run: |
          IMAGE_URL="${{ env.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.DOCKER_REPO_NAME }}/${{ env.APP_NAME }}:${{ github.sha }}"
          echo "image_url=${IMAGE_URL}" >> $GITHUB_OUTPUT

      - name: Build Docker image
        run: docker build -t ${{ steps.prepare.outputs.image_url }} .

      - name: Push Docker image
        run: docker push ${{ steps.prepare.outputs.image_url }}

  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest

    needs: [build-and-push]

    permissions:
      contents: "read"
      id-token: "write"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debug Image URL
        run: |
          echo "The image URL received from the build job is: '${{ needs.build-and-push.outputs.image_url }}'"

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Deploy with Terraform
        id: terraform_deploy
        working-directory: ./terraform
        env:
          TF_VAR_gcp_project_id: ${{ secrets.GCP_PROJECT_ID }}
          TF_VAR_docker_image_url: ${{ needs.build-and-push.outputs.image_url }}
        run: |
          terraform init
          terraform apply -auto-approve

          echo "app_url=$(terraform output -raw cloud_run_url)" >> $GITHUB_OUTPUT

      - name: Announce Deployment
        run: |
          echo "âœ… Deployment successful! Application live at: ${{ steps.terraform_deploy.outputs.app_url }}"
